import { useEffect, useState } from 'react';
import AuthenticatedLayout from '@/Layouts/AuthenticatedLayout';
import { Head, useForm } from '@inertiajs/react';

export default function Edit({ auth, project }) {
    // ‚úÖ „Éá„Éê„ÉÉ„Ç∞Áî®: „Éá„Éº„Çø„Çí„É≠„Ç∞„Å´Âá∫Âäõ
    useEffect(() => {
        console.log("‚úÖ „Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éá„Éº„Çø:", project);
    }, [project]);

    const { data, setData, patch, processing, errors } = useForm({
        project_name: project.project_name,
        project_image: null,
        project_image_url: project.project_image_url || '',
        github_url: project.github_url || '',
        live_url: project.live_url || '',
        team_name: project.team.name, // Á∑®ÈõÜ‰∏çÂèØ
        tech_stacks: project.tech_stacks ?? [],
        tags: project.tags ?? [],
        project_steps: project.project_steps ?? [], // üîπ Â∑•Á®ã„É™„Çπ„Éà„ÇíËøΩÂä†
    });

    // üî• ÁîªÂÉè„Éó„É¨„Éì„É•„ÉºÁî®„ÅÆ state „ÇíËøΩÂä†
    const [previewImage, setPreviewImage] = useState(data.project_image_url || '');
    const [isLoading, setIsLoading] = useState(false);

    // üî• ÁîªÂÉèÈÅ∏ÊäûÊôÇ„ÅÆÂá¶ÁêÜ
    const handleFileChange = (e) => {
        const file = e.target.files[0];
        setData('project_image', file);

        if (file) {
            const reader = new FileReader();
            reader.onload = (event) => {
                setPreviewImage(event.target.result);
            };
            reader.readAsDataURL(file);
        }
    };

    // ‚úÖ ÊäÄË°ì„Çπ„Çø„ÉÉ„ÇØ„ÅÆËøΩÂä†„ÉªÂâäÈô§
    const addTechStack = () => {
        setData('tech_stacks', [...data.tech_stacks, { id: null, name: '' }]);
    };
    const removeTechStack = (index) => {
        setData('tech_stacks', data.tech_stacks.filter((_, i) => i !== index));
    };

    // ‚úÖ „Çø„Ç∞„ÅÆËøΩÂä†„ÉªÂâäÈô§
    const addTag = () => {
        setData('tags', [...data.tags, { id: null, name: '' }]);
    };
    const removeTag = (index) => {
        setData('tags', data.tags.filter((_, i) => i !== index));
    };

    // ‚úÖ Â∑•Á®ã„ÅÆËøΩÂä†„ÉªÂâäÈô§
    const addStep = () => {
        setData('project_steps', [...data.project_steps, { id: null, title: '', description: '' }]);
    };
    const removeStep = (index) => {
        setData('project_steps', data.project_steps.filter((_, i) => i !== index));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();

        // üî• ÂøÖÈ†àÈ†ÖÁõÆ„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ
        if (!data.project_name.trim()) {
            alert("‚ö†Ô∏è „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºÅ");
            return;
        }

        setIsLoading(true); // üî• „É≠„Éº„Éá„Ç£„É≥„Ç∞ÈñãÂßã

        const formData = new FormData();
        formData.append('_method', 'PATCH');
        formData.append('project_name', data.project_name);
        formData.append('github_url', data.github_url || '');
        formData.append('live_url', data.live_url || '');

        if (data.project_image) {
            formData.append('project_image', data.project_image);
        }

        data.tech_stacks.forEach(stack => formData.append('tech_stacks[]', stack.name));
        data.tags.forEach(tag => formData.append('tags[]', tag.name));

        data.project_steps.forEach((step, index) => {
            formData.append(`project_steps[${index}][id]`, step.id ?? '');
            formData.append(`project_steps[${index}][title]`, step.title);
            formData.append(`project_steps[${index}][description]`, step.description);
        });

        console.log("üì° ÈÄÅ‰ø°„Éá„Éº„Çø:", [...formData.entries()]);

        patch(route('projects.update', { project: project.id }), formData, {
            onSuccess: () => {
                console.log("‚úÖ Êõ¥Êñ∞ÊàêÂäü");
                setIsLoading(false); // üî• „É≠„Éº„Éá„Ç£„É≥„Ç∞ÁµÇ‰∫Ü
            },
            onError: (errors) => {
                console.error("‚ùå Êõ¥Êñ∞„Ç®„É©„Éº:", errors);
                setIsLoading(false); // üî• „É≠„Éº„Éá„Ç£„É≥„Ç∞ÁµÇ‰∫Ü
            },
        });
    };



    return (
        <AuthenticatedLayout
            user={auth.user}
            header={<h2 className="font-semibold text-xl text-gray-800 leading-tight">„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁ∑®ÈõÜ</h2>}
        >
            <Head title="„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁ∑®ÈõÜ" />

            <div className="py-12">
                <div className="max-w-7xl mx-auto sm:px-6 lg:px-8">
                    <div className="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6">
                        <h3 className="text-lg font-semibold">„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁ∑®ÈõÜ</h3>

                        {/* ‚úÖ „É≠„Éº„Éá„Ç£„É≥„Ç∞„Çπ„Éî„Éä„Éº */}
                        {isLoading && (
                            <div className="flex justify-center items-center h-20">
                                <div className="animate-spin rounded-full h-12 w-12 border-t-4 border-blue-500"></div>
                            </div>
                        )}

                        {!isLoading && (
                            <form onSubmit={handleSubmit}>
                                {/* ‚úÖ „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÊÉÖÂ†± */}
                                <div>
                                    <label className="block font-medium text-sm text-gray-700">„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂêç</label>
                                    <input
                                        type="text"
                                        value={data.project_name}
                                        onChange={(e) => setData('project_name', e.target.value)}
                                        className="border-gray-300 rounded-md shadow-sm w-full"
                                    />
                                </div>

                                {/* ‚úÖ ÁîªÂÉè„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ */}
                                <div className="mt-4">
                                    <label className="block font-medium text-sm text-gray-700">„Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁîªÂÉè</label>
                                    <input type="file" onChange={handleFileChange} accept="image/*" className="mt-1 block w-full" />
                                    {previewImage && <img src={previewImage} alt="ÁîªÂÉè„Éó„É¨„Éì„É•„Éº" className="mt-2 w-32 h-32 rounded" />}
                                </div>

                                <div className="mt-4">
                                    <label className="block font-medium text-sm text-gray-700">GitHub URL</label>
                                    <input
                                        type="url"
                                        value={data.github_url}
                                        onChange={(e) => setData('github_url', e.target.value)}
                                        className="border-gray-300 rounded-md shadow-sm w-full"
                                    />
                                </div>

                                <div className="mt-4">
                                    <label className="block font-medium text-sm text-gray-700">ÂÖ¨Èñã URL</label>
                                    <input
                                        type="url"
                                        value={data.live_url}
                                        onChange={(e) => setData('live_url', e.target.value)}
                                        className="border-gray-300 rounded-md shadow-sm w-full"
                                    />
                                </div>

                                {/* ‚úÖ ÊäÄË°ì„Çπ„Çø„ÉÉ„ÇØ„ÅÆÁ∑®ÈõÜ */}
                                <div className="mt-6">
                                    <h4 className="font-semibold">ÊäÄË°ì„Çπ„Çø„ÉÉ„ÇØ</h4>
                                    {data.tech_stacks.map((stack, index) => (
                                        <div key={index} className="flex items-center mt-2">
                                            <input
                                                type="text"
                                                value={stack.name}
                                                onChange={(e) => {
                                                    const newTechStacks = [...data.tech_stacks];
                                                    newTechStacks[index].name = e.target.value;
                                                    setData('tech_stacks', newTechStacks);
                                                }}
                                                className="border-gray-300 rounded-md shadow-sm w-full"
                                                placeholder="ÊäÄË°ì„Çπ„Çø„ÉÉ„ÇØÂêç"
                                            />
                                            <button type="button" className="ml-2 bg-red-500 text-white px-2 py-1 rounded" onClick={() => removeTechStack(index)}>
                                                ÂâäÈô§
                                            </button>
                                        </div>
                                    ))}
                                    <button type="button" className="mt-2 bg-green-500 text-white px-3 py-1 rounded" onClick={addTechStack}>
                                        ËøΩÂä†
                                    </button>
                                </div>

                                {/* ‚úÖ „Çø„Ç∞„ÅÆÁ∑®ÈõÜ */}
                                <div className="mt-6">
                                    <h4 className="font-semibold">„Çø„Ç∞</h4>
                                    {data.tags.map((tag, index) => (
                                        <div key={index} className="flex items-center mt-2">
                                            <input
                                                type="text"
                                                value={tag.name}
                                                onChange={(e) => {
                                                    const newTags = [...data.tags];
                                                    newTags[index].name = e.target.value;
                                                    setData('tags', newTags);
                                                }}
                                                className="border-gray-300 rounded-md shadow-sm w-full"
                                                placeholder="„Çø„Ç∞Âêç"
                                            />
                                            <button type="button" className="ml-2 bg-red-500 text-white px-2 py-1 rounded" onClick={() => removeTag(index)}>
                                                ÂâäÈô§
                                            </button>
                                        </div>
                                    ))}
                                    <button type="button" className="mt-2 bg-green-500 text-white px-3 py-1 rounded" onClick={addTag}>
                                        ËøΩÂä†
                                    </button>
                                </div>

                                {/* ‚úÖ Â∑•Á®ã„ÅÆÁ∑®ÈõÜ */}
                                <div className="mt-6">
                                    <h4 className="font-semibold">Â∑•Á®ã</h4>
                                    {data.project_steps.map((step, index) => (
                                        <div key={index} className="mt-2">
                                            <input
                                                type="text"
                                                value={step.title}
                                                onChange={(e) => {
                                                    const newSteps = [...data.project_steps];
                                                    newSteps[index].title = e.target.value;
                                                    setData('project_steps', newSteps);
                                                }}
                                                className="border-gray-300 rounded-md shadow-sm w-full"
                                                placeholder="Â∑•Á®ã„Çø„Ç§„Éà„É´"
                                            />
                                            <textarea
                                                value={step.description}
                                                onChange={(e) => {
                                                    const newSteps = [...data.project_steps];
                                                    newSteps[index].description = e.target.value;
                                                    setData('project_steps', newSteps);
                                                }}
                                                className="border-gray-300 rounded-md shadow-sm w-full mt-2"
                                                placeholder="Â∑•Á®ã„ÅÆË™¨Êòé"
                                            />
                                            <button type="button" className="ml-2 bg-red-500 text-white px-2 py-1 rounded mt-2" onClick={() => removeStep(index)}>
                                                ÂâäÈô§
                                            </button>
                                        </div>
                                    ))}
                                    <button type="button" className="mt-2 bg-green-500 text-white px-3 py-1 rounded" onClick={addStep}>
                                        ËøΩÂä†
                                    </button>
                                </div>

                                <button type="submit" className="mt-6 bg-blue-500 text-white px-4 py-2 rounded">
                                    Êõ¥Êñ∞
                                </button>
                            </form>
                        )}
                    </div>
                </div>
            </div>
        </AuthenticatedLayout>
    );
}
